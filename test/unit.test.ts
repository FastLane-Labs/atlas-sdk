import { hexlify, toUtf8Bytes, HDNodeWallet } from "ethers";
import { OperationBuilder } from "../src/operation";
import { getCallChainHash, signEip712 } from "../src/utils";

describe("Atlas SDK unit tests", () => {
  const testUserOperation = OperationBuilder.newUserOperation({
    from: "0x0000000000000000000000000000000000000001",
    to: "0x0000000000000000000000000000000000000002",
    deadline: BigInt(100),
    gas: BigInt(200),
    nonce: BigInt(300),
    maxFeePerGas: BigInt(400),
    value: BigInt(500),
    dapp: "0x0000000000000000000000000000000000000003",
    control: "0x0000000000000000000000000000000000000004",
    sessionKey: "0x0000000000000000000000000000000000000005",
    data: hexlify(toUtf8Bytes("data")),
    signature: hexlify(toUtf8Bytes("signature")),
  });

  const testSolverOperation = OperationBuilder.newSolverOperation({
    from: "0x0000000000000000000000000000000000000001",
    to: "0x0000000000000000000000000000000000000002",
    value: BigInt(100),
    gas: BigInt(200),
    maxFeePerGas: BigInt(300),
    deadline: BigInt(400),
    solver: "0x0000000000000000000000000000000000000003",
    control: "0x0000000000000000000000000000000000000004",
    userOpHash:
      "0x9999999999999999999999999999999999999999999999999999999999999999",
    bidToken: "0x0000000000000000000000000000000000000005",
    bidAmount: BigInt(500),
    data: hexlify(toUtf8Bytes("data")),
    signature: hexlify(toUtf8Bytes("signature")),
  });

  const testDAppOperation = OperationBuilder.newDAppOperation({
    from: "0x0000000000000000000000000000000000000001",
    to: "0x0000000000000000000000000000000000000002",
    value: BigInt(100),
    gas: BigInt(200),
    nonce: BigInt(300),
    deadline: BigInt(400),
    control: "0x0000000000000000000000000000000000000003",
    bundler: "0x0000000000000000000000000000000000000004",
    userOpHash:
      "0x9999999999999999999999999999999999999999999999999999999999999999",
    callChainHash:
      "0x8888888888888888888888888888888888888888888888888888888888888888",
    signature: hexlify(toUtf8Bytes("signature")),
  });

  test("abi encode user operation", () => {
    expect(testUserOperation.abiEncode()).toBe(
      "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000000c80000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000012c0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000004646174610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000097369676e61747572650000000000000000000000000000000000000000000000"
    );
  });

  test("abi encode solver operation", () => {
    expect(testSolverOperation.abiEncode()).toBe(
      "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000c8000000000000000000000000000000000000000000000000000000000000012c0000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000049999999999999999999999999999999999999999999999999999999999999999000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000004646174610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000097369676e61747572650000000000000000000000000000000000000000000000"
    );
  });

  test("callChainHash with required preOps computation", () => {
    const callChainHash = getCallChainHash(
      4,
      "0x0000000000000000000000000000000000000004",
      testUserOperation,
      [testSolverOperation, testSolverOperation, testSolverOperation]
    );

    expect(callChainHash).toBe(
      "0xbb6a59376026161b088c50619219ae0ca70d2574ef8bf0346064910a4564624a"
    );
  });

  test("callChainHash without required preOps computation", () => {
    const callChainHash = getCallChainHash(
      0,
      "0x0000000000000000000000000000000000000004",
      testUserOperation,
      [testSolverOperation, testSolverOperation, testSolverOperation]
    );

    expect(callChainHash).toBe(
      "0x7a856dd01991620aa2adcb177ef5cdcc9c1f524920d6791817f9272e131f869c"
    );
  });

  test("signEip712", async () => {
    const signer = HDNodeWallet.fromSeed(
      toUtf8Bytes("bad seed used for this test only")
    );

    const signature = signEip712(
      "0x82b5c47bb09eca2c93143f36f8fde6567050d39f3611535aab530d4f15fa5d0f",
      testDAppOperation.proofHash(),
      signer
    );

    // TODO: make this work
    // const signature = await signer.signTypedData(
    //   chainConfig[0].eip712Domain,
    //   testDAppOperation.toTypedDataTypes(),
    //   testDAppOperation.toTypedDataValues()
    // );

    expect(signature).toBe(
      "0xa11109455bb5a262eaa0a0718ce0c306e5668e25845ed02324ad286cccdea41038bb2a1772922a427032bd8d622e01131772b32b8d0eedaa4e6dde38988b18621c"
    );
  });
});
